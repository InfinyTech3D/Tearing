name: CI

on:
  push:

jobs:
  build-and-test:
    name: Run on ${{ matrix.os }} with SOFA ${{ matrix.sofa_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        sofa_branch: [v23.12]

    steps:
      - name: (Mac) Workaround for homebrew
        shell: bash
        if: runner.os == 'macOS'
        run: |
            rm -f /usr/local/bin/2to3
            rm -f /usr/local/bin/idle3
            rm -f /usr/local/bin/pydoc3
            rm -f /usr/local/bin/python3
            rm -f /usr/local/bin/python3-config
            rm -f /usr/local/bin/2to3-3.11
            rm -f /usr/local/bin/idle3.11
            rm -f /usr/local/bin/pydoc3.11
            rm -f /usr/local/bin/python3.11
            rm -f /usr/local/bin/python3.11-config
            rm -f /usr/local/bin/go
            rm -f /usr/local/bin/gofmt
            
      - name: Setup SOFA and environment
        id: sofa
        uses: sofa-framework/sofa-setup-action@v5
        with:
          sofa_root: ${{ github.workspace }}/sofa
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_scope: 'standard'
      
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: ${{ env.WORKSPACE_SRC_PATH }}        
      
      - name: Build and install
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} \
              && cd /d $WORKSPACE_BUILD_PATH \
              && cmake \
                  -GNinja \
                  -DCMAKE_PREFIX_PATH="$SOFA_ROOT/lib/cmake" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
                  ../src \
              && ninja -v install"
          else
            cd "$WORKSPACE_BUILD_PATH"
            ccache -z
            cmake \
              -GNinja \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
              ../src
            ninja -v install
            echo ${CCACHE_BASEDIR}
            ccache -s
          fi
      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: Tearing_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}
          path: ${{ env.WORKSPACE_INSTALL_PATH }}

      - name: Install artifact
        uses: actions/download-artifact@v2
        with:
          name: Tearing_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}
          path: ${{ env.WORKSPACE_ARTIFACT_PATH }}

      - name: Set env vars for tests
        shell: bash
        run: |
          # Set env vars for tests
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$WORKSPACE_ARTIFACT_PATH/lib" >> $GITHUB_PATH
            echo "$WORKSPACE_ARTIFACT_PATH/bin" >> $GITHUB_PATH
            echo "SOFA_PLUGIN_PATH=$WORKSPACE_ARTIFACT_PATH/bin" | tee -a $GITHUB_ENV
          else
            echo "SOFA_PLUGIN_PATH=$WORKSPACE_ARTIFACT_PATH/lib" | tee -a $GITHUB_ENV
          fi

          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "DYLD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$DYLD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          fi

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "LD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$LD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          fi

      - name: Run Tearing_test
        if: always()
        shell: bash
        run: |
          chmod +x $WORKSPACE_BUILD_PATH/bin/Tearing_test${{ steps.sofa.outputs.exe }}
          cd $WORKSPACE_BUILD_PATH
          ./bin/Tearing_test${{ steps.sofa.outputs.exe }}

  deploy:
    name: Deploy artifacts
    if: always() && startsWith(github.ref, 'refs/heads/') # we are on a branch (not a PR)
    needs: [build-and-test]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Zip artifacts
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/artifacts
          for artifact in *; do
            zip $artifact.zip -r $artifact/*
          done
      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: release-${{ github.ref_name }}
          fail_on_unmatched_files: true
          files: |
            artifacts/Tearing_*_Linux.zip
            artifacts/Tearing_*_Windows.zip
            artifacts/Tearing_*_macOS.zip

